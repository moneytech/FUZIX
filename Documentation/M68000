Motorola 68000
--------------

System Calls
------------

The syscall API is as follows

trap #12

The trap number is chosen to avoid other traps we might want to use for
emulating things like TOS or CP/M 68K.

Arguments are placed as follows

D0.W - call number
D1.L - argument 1
A0.L - argument 2
A1.L - argument 3
A2.L - argument 4

All system calls except fork (and in future possibly things like vfork)
save all registers except A0/A1/D0/D1. This matches the GCC ABI and avoids
too much stack pushing and popping. Four argument C callers need to save and
restore A2 first.

System calls are 32bit integer, 32bit pointer.

On return:

D1.W is the error code if present or 0 if not.
D0.L and A0.L hold the return code
A1.L is destroyed.


Fork is special. The performance tricks for general syscalls mean that
fork() cannot restore all the registers. The kernel interface restores only
A5. A5 is chosen because it is used for the GOT on PIC binaries and without
A5 being kernel restored a signal just as a fork completes could make a nasty
mess. A5 is also to match used in kernel for the udata pointer.

Fork returns the same way as other calls.

To deal with all of this the fork wrapper in libc saves and restores the
other expected registers (all but A0/A1/D0/D1) so the trick is invisible to
normal C code.


Signal Handling And VDSO
------------------------

The kernel injects a short code block in the header space of the binary that is
not available otherwise. At the moment this consists of two entry points

0: trap and rts to make a system call. Not currently used as it appears
we don't need to change trap.
4: signal unwind code

The block is executed in user mode.

The internal behaviour of the signal handler is not defined to be ABI but
the following are guaranteed.

On entry to a signal handler the stack frame looks like a C call and holds
(low to high)

	Address of signal unwind code
	Signal number
	Pointer to copy of trap frame for hardware exceptions only
		(This is CPU specific so be careful!)
	Pointer to save of A0-A1/D0-D1 in MOVEM order with CCR above
	[Undefined]
	[A0-A1/D0-D1]
	[CCR]
	[Undefined]
	Return address

A program is permitted to

	longjmp out discarding the frame
	modify the saved A0-A1/D0-D1 and CCR (eg for emulation)
	directly set A2-A6/D2-D7 and have them passed back to the code
	that caused the event. In other words you can set all registers.

The only portable property is the signal number.



Executables
-----------

Executables are currently loaded using the ucLinux flat binary format. The
format has some serious problems so this may change.

Only flat binaries with standard relocations are currently supported. Although
the core kernel is designed to handle PIC the loader does not yet do GOT
relocations.

Compressed binaries are not supported, nor is executing from ROM.

The 'stack' space is also the sbrk space (akin to Minix). At the moment
malloc also uses this but that will change.

Binaries with GOTPIC will in future be executed re-entrantly so must be
clean and contain no data relocations. Other binaries should also have the
text clean as since we do memory swapping it will be possible to share the
code across forks (avoiding some of the copying due to MMUless).

Currently binaries are loaded as a single linear block with code, data and
bss in order then stack. This is *not* guaranteed.

The following binfmt_flat things want fixing ideally

- No field to identify target OS and CPU
- No field to identify any platform features wanted
- Relocations are very inefficiently stored
- Multiple segments cannot be loaded into different places (eg as AmigaOS can)
- Shared libraries including GOT accesses to private data

Possibly even a mini-ELF loader ?




Traps Used By Other Systems
---------------------------

Atari 68K systems:
#1 GEMDOS
#13 BIOS
#14 XBIOS


CP/M 68K:
#2 BDOS
#3 BIOS


Sinclair QL:
#0-4 QDOS

Minix
#0 SendRec

Amiga:
Dynamic

Convention:
#15 Debug trap

