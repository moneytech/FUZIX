PLATFORM = 68000
CC = m68k-uclinux-gcc
ASM = m68k-uclinux-as
AR = m68k-uclinux-ar
LINKER = m68k-uclinux-ld
CFLAGS = -Os -fno-strict-aliasing -fomit-frame-pointer -fno-builtin -Wall -m68000 -I../../../../Library/include -I../../../../Library/include/68000
LINKER_OPT = -L../../../../Library/libs -lc68000
LIBGCCDIR = $(dir $(shell $(CC) -print-libgcc-file-name))
LINKER_OPT += --emit-relocs -L$(LIBGCCDIR) -lgcc -T ../../../../Library/elf2flt.ld
CRT0 = ../../../../Library/libs/crt0_68000.o
CRT0NS = ../../../../Library/libs/crt0nostdio_68000.o
# For now while we get going. Really we want to use some kind of elf2zmagic
# with relocs.
ELF2FUZIX = elf2flt -s 16384
.SUFFIXES: .c .o

SRCS  = args.c blok.c builtin.c cmd.c ctype.c error.c expand.c fault.c io.c \
        macro.c main.c msg.c name.c print.c service.c setbrk.c stak.c \
        string.c word.c xec.c glob.c

INCS  = brkincr.h ctype.h defs.h mac.h mode.h name.h stak.h sym.h timeout.h

OBJS = $(SRCS:.c=.o)

all: fsh sh

$(OBJS): $(INCS)
FOBJS = $(patsubst %.c,fshbuild/%.o, $(SRCS))

OBJS = $(SRCS:.c=.o)

$(FOBJS): $(INCS)

$(OBJS): %.o : %.c
	$(CC) -c $(CFLAGS) $(COPT) $<

$(FOBJS): fshbuild/%.o: %.c
	$(CC) -c $(CFLAGS) $(COPT) -DBUILD_FSH $< -o $@

sh: $(CRT0) $(OBJS)
	$(LINKER) $^ -o $@.bin $(LINKER_OPT)
	$(ELF2FUZIX) -o $@ $@.bin

fsh: $(CRT0) $(FOBJS)
	$(LINKER) $^ -o $@.bin $(LINKER_OPT) -lreadline68000
	$(ELF2FUZIX) -o $@ $@.bin

size.report: $(APPS)
	ls -l $^ > $@

clean:
	rm -f $(FOBJS) $(OBJS) sh fsh $(SRCS:.c=) core *~ *.asm *.lst *.sym *.map *.noi *.lk *.ihx *.tmp *.bin size.report *.o

rmbak:
	rm -f *~ core

